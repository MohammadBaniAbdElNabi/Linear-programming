Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Importing Pyomo environment
from pyomo.environ import * # Imports all components from the Pyomo environment, like Var, Param, Objective, Constraint, etc.

# Function to solve and display results of an optimization model
def solve_model(model, example_name):
    print("\n" + "="*40) # Prints a separator line for better output formatting.
    print(f" Solving {example_name} ") # Prints the name of the example being solved.
    print("="*40) # Prints another separator line.
    solver = SolverFactory('cbc') # Creates a solver object using the CBC solver.
    result = solver.solve(model) # Solves the given Pyomo model using the CBC solver.
    print("\nOptimal Solution:") # Prints a header for the optimal solution.
    for v in model.component_objects(Var, active=True): # Iterates through all active variables in the model.
        for index in v: # Iterates through any indices of the variable (if it's indexed).
            print(f"  {v[index]} = {v[index].value}") # Prints the variable name and its optimal value.
    print("\nObjective Value:", model.obj()) # Prints the optimal value of the objective function.

# Function to build the abstract Pyomo model for Example 2.2.1
def build_abstract_model_221():
    model = AbstractModel() # Creates an AbstractModel object, which is a Pyomo model that is defined without specific data values.
    model.xA = Var(within=NonNegativeReals) # Defines a decision variable `xA` representing the number of Model A routers produced, constrained to be non-negative.
    model.xB = Var(within=NonNegativeReals) # Defines a decision variable `xB` representing the number of Model B routers produced, constrained to be non-negative.
    model.obj_coeff_A = Param() # Defines a parameter `obj_coeff_A` for the objective function coefficient of `xA`.
    model.obj_coeff_B = Param() # Defines a parameter `obj_coeff_B` for the objective function coefficient of `xB`.
    model.materials_coeff_A = Param() # Defines a parameter `materials_coeff_A` for the materials constraint coefficient of `xA`.
    model.materials_coeff_B = Param() # Defines a parameter `materials_coeff_B` for the materials constraint coefficient of `xB`.
    model.materials_rhs = Param() # Defines a parameter `materials_rhs` for the right-hand side of the materials constraint.
    model.labor_coeff_A = Param() # Defines a parameter `labor_coeff_A` for the labor constraint coefficient of `xA`.
    model.labor_coeff_B = Param() # Defines a parameter `labor_coeff_B` for the labor constraint coefficient of `xB`.
    model.labor_rhs = Param() # Defines a parameter `labor_rhs` for the right-hand side of the labor constraint.

    # Defines the objective function rule
    def obj_rule(model):
        return model.obj_coeff_A * model.xA + model.obj_coeff_B * model.xB # Specifies the objective function to maximize profit.
    model.obj = Objective(rule=obj_rule, sense=maximize) # Creates the objective function object with the defined rule and maximization sense.

    # Defines the materials constraint rule
    def materials_rule(model):
        return model.materials_coeff_A * model.xA + model.materials_coeff_B * model.xB <= model.materials_rhs # Specifies the materials constraint.
    model.materials = Constraint(rule=materials_rule) # Creates the materials constraint object with the defined rule.

    # Defines the labor constraint rule
    def labor_rule(model):
        return model.labor_coeff_A * model.xA + model.labor_coeff_B * model.xB <= model.labor_rhs # Specifies the labor constraint.
    model.labor = Constraint(rule=labor_rule) # Creates the labor constraint object with the defined rule.
    return model # Returns the built abstract model.

# Data for Example 2.2.1
data_221 = {
    None: {
        'obj_coeff_A': {None: 22}, 'obj_coeff_B': {None: 28}, # Objective function coefficients for xA and xB
        'materials_coeff_A': {None: 8}, 'materials_coeff_B': {None: 10}, 'materials_rhs': {None: 3400}, # Materials constraint coefficients and RHS
        'labor_coeff_A': {None: 2}, 'labor_coeff_B': {None: 3}, 'labor_rhs': {None: 960} # Labor constraint coefficients and RHS
    }
}
model_221 = build_abstract_model_221().create_instance(data_221) # Creates a concrete model instance by loading data into the abstract model.
solve_model(model_221, "Example 2.2.1") # Solves the model instance and prints the results.
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 2[39m
[32m      1[39m [38;5;66;03m# Importing Pyomo environment[39;00m
[32m----> [39m[32m2[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mpyomo[39;00m[34;01m.[39;00m[34;01menviron[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m * [38;5;66;03m# Imports all components from the Pyomo environment, like Var, Param, Objective, Constraint, etc.[39;00m
[32m      4[39m [38;5;66;03m# Function to solve and display results of an optimization model[39;00m
[32m      5[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34msolve_model[39m(model, example_name):

[31mModuleNotFoundError[39m: No module named 'pyomo'

