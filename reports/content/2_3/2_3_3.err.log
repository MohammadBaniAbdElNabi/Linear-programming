Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def find_intersection(line1, line2):
    A = np.array([[line1[0], line1[1]], [line2[0], line2[1]]])
    b = np.array([line1[2], line2[2]])
    if np.linalg.det(A) == 0:
        return None  # Parallel lines, no intersection
    return np.linalg.solve(A, b)

def is_feasible(point, constraints):
    x, y = point
    for a, b, c, sign in constraints:
        if sign == '<' and not (a * x + b * y <= c):
            return False
        if sign == '>' and not (a * x + b * y >= c):
            return False
    return True

def find_optimal_points(obj_type, a, b, constraints):
    feasible_points = []
    for (line1, line2) in combinations(constraints, 2):
        intersection = find_intersection(line1, line2)
        if intersection is not None and is_feasible(intersection, constraints):
            feasible_points.append(intersection)

    feasible_points = np.array(feasible_points)
    if feasible_points.size == 0:
        print("No feasible region found")
        return np.array([]), None

    obj_values = [a * x + b * y for x, y in feasible_points]
    optimal_index = np.argmax(obj_values) if obj_type == "maximize" else np.argmin(obj_values)
    optimal_point = feasible_points[optimal_index]
    return feasible_points, optimal_point

def plot_feasible_region(constraints, x_range, y_range):
    x, y = np.meshgrid(x_range, y_range)
    feasible_region = np.ones_like(x, dtype=bool)

    for a, b, c, sign in constraints:
        if sign == '<':
            feasible_region &= (a * x + b * y <= c)
        elif sign == '>':
            feasible_region &= (a * x + b * y >= c)

    plt.imshow(feasible_region.astype(int), extent=(x.min(), x.max(), y.min(), y.max()), origin="lower", cmap="Greys", alpha=0.3)

def plot_constraints(constraints, x_range):
    for a, b, c, sign in constraints:
        y_vals = np.linspace(0, 10, 2000)
        if a != 0:
            x_vals = (c - b * y_vals) / a
        else:
            x_vals = np.full_like(y_vals, c / b)
        plt.plot(x_vals, y_vals, label=f'{a}x + {b}y {sign} {c}')

def graphical_method(obj_type, a, b, constraints):
    x_range = np.linspace(0, 16, 300)
    y_range = np.linspace(0, 10, 300)
    plt.figure(figsize=(8, 8))
    plot_feasible_region(constraints, x_range, y_range)
    plot_constraints(constraints, x_range)

    feasible_points, optimal_point = find_optimal_points(obj_type, a, b, constraints)

    if feasible_points.size > 0:
        feasible_x, feasible_y = zip(*feasible_points)
        plt.scatter(feasible_x, feasible_y, color='blue', label='Feasible Points')

    if optimal_point is not None:
        plt.scatter(*optimal_point, color='red', s=100, label='Optimal Point', edgecolors='black')

    plt.xlim(0, 16)
    plt.ylim(0, 10)
    plt.xlabel(r'$x$')
    plt.ylabel(r'$y$')
    plt.legend(loc='upper right')
    plt.title(f"{obj_type.capitalize()} Objective Function")
    plt.grid(True)
    plt.show()

def solve_example():
    example = [
        ("maximize", 1, 2, [(-1, 1, 2, '<'), (1, 2, 8, '<'), (1, 0, 6, '<'), (1, 0, 0, '>'), (0, 1, 0, '>')])
    ]

    for obj_type, a, b, constraints in example:
        graphical_method(obj_type, a, b, constraints)

solve_example()
------------------


[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 88[39m
[32m     85[39m     [38;5;28;01mfor[39;00m obj_type, a, b, constraints [38;5;129;01min[39;00m example:
[32m     86[39m         graphical_method(obj_type, a, b, constraints)
[32m---> [39m[32m88[39m [43msolve_example[49m[43m([49m[43m)[49m

[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 86[39m, in [36msolve_example[39m[34m()[39m
[32m     81[39m example = [
[32m     82[39m     ([33m"[39m[33mmaximize[39m[33m"[39m, [32m1[39m, [32m2[39m, [(-[32m1[39m, [32m1[39m, [32m2[39m, [33m'[39m[33m<[39m[33m'[39m), ([32m1[39m, [32m2[39m, [32m8[39m, [33m'[39m[33m<[39m[33m'[39m), ([32m1[39m, [32m0[39m, [32m6[39m, [33m'[39m[33m<[39m[33m'[39m), ([32m1[39m, [32m0[39m, [32m0[39m, [33m'[39m[33m>[39m[33m'[39m), ([32m0[39m, [32m1[39m, [32m0[39m, [33m'[39m[33m>[39m[33m'[39m)])
[32m     83[39m ]
[32m     85[39m [38;5;28;01mfor[39;00m obj_type, a, b, constraints [38;5;129;01min[39;00m example:
[32m---> [39m[32m86[39m     [43mgraphical_method[49m[43m([49m[43mobj_type[49m[43m,[49m[43m [49m[43ma[49m[43m,[49m[43m [49m[43mb[49m[43m,[49m[43m [49m[43mconstraints[49m[43m)[49m

[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 56[39m, in [36mgraphical_method[39m[34m(obj_type, a, b, constraints)[39m
[32m     55[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mgraphical_method[39m(obj_type, a, b, constraints):
[32m---> [39m[32m56[39m     x_range = [43mnp[49m.linspace([32m0[39m, [32m16[39m, [32m300[39m)
[32m     57[39m     y_range = np.linspace([32m0[39m, [32m10[39m, [32m300[39m)
[32m     58[39m     plt.figure(figsize=([32m8[39m, [32m8[39m))

[31mNameError[39m: name 'np' is not defined

